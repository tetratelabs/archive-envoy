# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/release.yaml
---
name: "release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version of the release. Ex v1.34.1 or v1.34.1_debug
        required: true

defaults:
  run: # use bash for all operating systems unless overridden
    shell: bash

jobs:
  build-envoy-macos:
    runs-on: macos-15-xlarge
    name: "Build Envoy® for MacOS Apple Silicon"
    # steps are skipped instead of skipping job as if we skipped the job, the
    # archive job would not run.
    steps:
      - name: Check out Envoy source for the specified tag
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        uses: actions/checkout@v4
        with:
          repository: envoyproxy/envoy
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Install build-time tools
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        run: |
          brew update
          brew install automake cmake libtool ninja bazelisk python@3.9 coreutils llvm@18
          echo "$(brew --prefix coreutils)/libexec/gnubin" >> $GITHUB_PATH

      - name: Set up LLVM-18 clang/clang++ on PATH
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        run: |
          llvm_path=$(brew --prefix llvm@18)
          echo "$llvm_path/bin" >> $GITHUB_PATH
          echo "CC=$llvm_path/bin/clang" >> $GITHUB_ENV
          echo "CXX=$llvm_path/bin/clang++" >> $GITHUB_ENV

      - name: Add Python 3.9 to PATH
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        run: echo "/usr/local/opt/python@3.9/bin" >> $GITHUB_PATH

      - name: Write current source version
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        run: python3 tools/github/write_current_source_version.py --skip_error_in_git

      - name: Build envoy-static
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.15
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          # locate bazelisk
          export BAZELISK=$(brew --prefix bazelisk)/bin/bazelisk

          # base Bazel flags from the Homebrew formula
          ARGS=(
            --compilation_mode=opt
            --curses=no
            --verbose_failures
            --define=wasm=enabled
            --copt=-Wno-unused-but-set-variable
            --copt="-isysroot ${SDKROOT}"
            --linkopt="-isysroot ${SDKROOT}"
            --linkopt="-L${SDKROOT}/usr/lib"
            --config=clang
            --action_env=CC=${CC}
            --action_env=CXX=${CXX}
            --host_action_env=CC=${CC}
            --host_action_env=CXX=${CXX}
            --macos_minimum_os=${MACOSX_DEPLOYMENT_TARGET}
          )

          # if Clang ≥17, disable the new missing-template-arg-list warning
          CLANG_MAJOR=$(clang --version | sed -n 's/.*clang version \([0-9]\+\).*/\1/p')
          if [ "$CLANG_MAJOR" -ge 17 ]; then
            ARGS+=(--copt=-Wno-missing-template-arg-list-after-template-kw)
          fi

          # build the static binary
          $BAZELISK build "${ARGS[@]}" //source/exe:envoy-static
          
          # rename it
          mkdir bin
          mv bazel-bin/source/exe/envoy-static bin/envoy
          chmod +x bin/envoy

      - name: Upload Envoy binary
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        uses: actions/upload-artifact@v4
        with:
          name: envoy-${{ github.event.inputs.version }}-darwin-arm64
          path: bin/envoy

  archive:
    name: "Archive Envoy® Release"
    needs: build-envoy-macos
    runs-on: ubuntu-24.04 # Hard-coding an LTS means maintenance, but only once each 2 years!
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Install Go" # So we can run a patched car without needing to release a new version.
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: "Install netlify-cli"
        run: |
          npm install --save-dev netlify-cli

      - name: "Download macOS Apple Silicon binary"
        if: ${{ !endsWith(github.event.inputs.version, '_debug') }}
        uses: actions/download-artifact@v4
        with:
          name: envoy-${{ github.event.inputs.version }}-darwin-arm64
          path: ${{ github.event.inputs.version }}/envoy-${{ github.event.inputs.version }}-darwin-arm64/bin

      - name: "Mark macOS Apple Silicon binary as executable"
        # https://github.com/actions/upload-artifact/issues/38
        # https://github.com/actions/download-artifact/issues/14
        run: chmod +x ${{ github.event.inputs.version }}/envoy-${{ github.event.inputs.version }}-darwin-arm64/bin/envoy

      - name: "Archive Envoy Release"
        run: ./bin/archive_release_version.sh envoyproxy/envoy "${{ github.event.inputs.version }}"

      - name: "Upload GitHub Release"
        uses: ncipollo/release-action@v1
        with: # TODO: This would be easier to troubleshoot if used `gh` commands like func-e does.
          artifacts: "${{ github.event.inputs.version }}/*"
          allowUpdates: true
          generateReleaseNotes: false
          omitBody: true
          tag: ${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Trigger Netlify deploy" # The above upload won't create a GHA trigger, so we make one directly
        run: ./node_modules/.bin/netlify deploy --message="deploy ${TAG}" --trigger --auth=${NETLIFY_AUTH_TOKEN} --site=${NETLIFY_SITE_ID}
        env: # https://github.com/tetratelabs/archive-envoy/settings/secrets
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }} # https://app.netlify.com/user/applications/personal
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }} # .netlify/state.json/siteId

  # Failures here happen after release, meaning they don't block a release. This is ok as we may be releasing Linux
  # prior to OS/x being available, or releasing a debug version which is only available on Linux. The failures here are
  # only to help us later identify issues, should some user concerns come up.
  test:
    name: "Test Envoy® Archive (${{ matrix.os }})"
    needs: archive
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail fast as sometimes failures are operating system specific
      matrix:
        # Non-deprecated from https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        # Note: We don't test arm64 on release as it is unlikely to fail and too much effort.
        #
        # Operating systems in this matrix can run recent versions of Envoy. This needs maintenance
        # as Envoy requires newer versions of libc. The point of these tests are only to ensure the tarball wasn't corrupted
        # or built for the wrong platform.
        include:
          - os: ubuntu-24.04
            arch: amd64
          - os: macos-15-xlarge
            arch: arm64

    steps:
      - name: "Extract `envoy` binary from GitHub release assets"
        run:
          | # https://docs.github.com/en/actions/learn-github-actions/environment-variables
          os=$(echo ${RUNNER_OS} | tr '[:upper:]' '[:lower:]' | sed 's/macos/darwin/g' )
          gh release -R ${GITHUB_REPOSITORY} download "${{ github.event.inputs.version }}" -p "*-${os}-${{ matrix.arch }}.tar.xz"
          tar --strip-components=2 -xpJf *.tar.xz && rm *.tar.xz
        env: # authenticate release downloads in case it is a draft (not public)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: ./envoy --version
